<?php
namespace App\Controller;

use Cake\Controller\Controller;
use Cake\Event\Event;
use Cake\Utility\Security;
use Cake\Utility\Sendemail;
use Cake\Auth\DefaultPasswordHasher;  

// src/Controller/UsersController.php

class UsersController extends AppController
{
	var $uses=array('User');

	public function beforeFilter(Event $event)
	{
	   parent::beforeFilter($event);
	}

	public function initialize()
	{
	    parent::initialize();
	    //$this->loadComponent('ImageTransform');
	}


	////////// login page

	public function index()
	{
	   $this->set('active_class','user');
	    $session = $this->request->session();
	    
	    if($this->is_admin_logged()){
		return $this->redirect(BASE_URL.'administrator/dashboard');
	    }
	    if($this->request->is('post')){
	       $user = $this->Auth->identify();
	       if($user){
		    $data_arr=$this->request->data;
		    $this->Auth->setUser($user);
		    $query = $this->Users->findByUsername($data_arr['username']);
		    $user_details=$query->first();
		    $session->write('admin.details',$user_details);
		    if(isset($data_arr['remember_me']))
		    {
			if($data_arr['remember_me']=='on')
			{
			    if($this->Cookie->check('admin_username'))
			    {
				 $this->Cookie->delete('admin_username');
			    }
	
			    $this->Cookie->write('admin_username',$data_arr['username'],false,31536000);
			    if($this->Cookie->check('admin_password'))
			    {
				 $this->Cookie->delete('admin_password');
			    }
			    $this->Cookie->write('admin_password',$data_arr['password'],false,31536000);
			}
		    }
		    return $this->redirect($this->Auth->redirectUrl(BASE_URL.'administrator/dashboard'));
	       }
	       else
	       {
	
		   $session->write('login_error',1);
		   return $this->redirect(BASE_URL.'administrator');
	
	       }
	    }
	    $this->set('title',SITE_NAME." Admin Login");
	    $this->set('description','Login page for '.SITE_NAME.' admin login');
	
	    if($this->Cookie->check('admin_username'))
	    {
		    $username=$this->Cookie->read('admin_username');
	    }
	    else
	    {
		    $username='';
	    }
	    if($this->Cookie->check('admin_password'))
	    {
		    $password=$this->Cookie->read('admin_password');
	    }
	    else
	    {
		    $password='';
	    }
	
	
	
	    $this->set('admin_username',$username);
	    $this->set('admin_password',$password);
	    if($this->Cookie->check('admin_username')&&$this->Cookie->check('admin_password'))
	    {
		    $this->set('remember_me','on');
	    }
	    else
	    {
		    $this->set('remember_me','off');
	    }
	}

////////---> loading dashboard

public function dashboard()
{
   $session = $this->request->session();
   $adminDetls = $session->read('admin.details');
   $this->set('title',SITE_NAME." Admin Dashboard");
   $this->set('description','Dashboard of '.SITE_NAME.' admin panel');
   $this->set('userRole',$adminDetls->role);
   $this->set('active_class','dashboard');
}

public function edit($id=null)
{
   $this->set('active_class','user');
    $session = $this->request->session();
    $adminDetls = $session->read('admin.details');
    $hasAccess = $this->hasAccess($adminDetls->id,'8','moduleEdit');
    if($hasAccess=='0' && $adminDetls->id!='1'){
        $this->Flash->success("You don't have access to this page.", [
           'key' => 'positive'
        ]);
        $this->redirect(BASE_URL.'admin/dashboard');        
    }
    
    $this->loadComponent('ImageTransform');
    $this->loadModel('Users');
    $this->loadModel('Countries');
    $this->loadModel('Roles');
   
    $allRoles = $this->Roles->find('all');

    $validationErrMsg = array();
    $fieldsValue = array();
    $organisationTeams = array();
    $hasError = 0;
    $pattern = "/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/i";


    $this->set('title',"Admin|Edit Users");
    $this->set('description','Edit Team User');
    $this->set('userRole',$adminDetls->role);    
   
    $allCountries=$this->Countries->find('all',
        array(
            'order' => 'Countries.country_name ASC'                        
        ));
    
    $users = $this->Users->get($id, [
        'contain' => []
    ]);   
    if ($this->request->is('post')){      
        $postData = $this->request->data; 
        
        if($_FILES['usersImage']['name']!=''){
            $fileName = $_FILES['usersImage']['name'];
            $fileNameArr = explode(".",$fileName);
            $fileNameArrCnt = count($fileNameArr);
            $extn = $fileNameArr[$fileNameArrCnt-1];
            $extn = strtolower($extn);
        }
            
        $fieldsValue['role'] = isset($postData['role']) ? $postData['role'] : array();
        $fieldsValue['userRoles'] = $postData['userRoles'];
        $fieldsValue['username'] = $postData['username'];
        $fieldsValue['firtName'] = $postData['firtName'];
        $fieldsValue['lastName'] = $postData['lastName']; 
        $fieldsValue['birthDay'] = $postData['birthDay']; 
        $fieldsValue['birthMonth'] = $postData['birthMonth']; 
        $fieldsValue['birthYear'] = $postData['birthYear'];
        $fieldsValue['dateOfBirth'] = $postData['birthYear'].'-'.$postData['birthMonth'].'-'.$postData['birthDay'];
        $fieldsValue['email'] = $postData['email']; 
        $fieldsValue['phone'] = $postData['phone']; 
        $fieldsValue['address'] = $postData['address']; 
        $fieldsValue['city'] = $postData['city']; 
        $fieldsValue['state'] = $postData['state']; 
        $fieldsValue['country'] = $postData['country'];
        
        if($postData['userRoles']==''){
            $validationErrMsg['userRoles']="Please select user roles";
            $hasError = 1;
        }else{
            $validationErrMsg['userRoles']="";
        }
            
        $allUsernames=$this->Users->find('all',
        array('conditions' => array(
                'username' => $postData['username'],
                'id <>'=>$id,
                'is_deleted' => '0'
            )
        ));
        
        $allEmails=$this->Users->find('all',
        array('conditions' => array(
                'email' => $postData['email'],
                'id <>'=>$id,
                'is_deleted' => '0'
            )
        ));

        
        if(!isset($postData['role']) || count($postData['role'])==0){
            $validationErrMsg['role']="Please select role.";
            $hasError = 1;
        }else{
            $validationErrMsg['role']="";
        }

        if($postData['username']==''){
            $validationErrMsg['username']="Username.";
            $hasError = 1;
        }else if($allUsernames->count() > 0){
            $validationErrMsg['username']="This Username exists for other user.";
            $hasError = 1;
        }else{
            $validationErrMsg['username']="";
        }
        
        if($postData['firtName']==''){
            $validationErrMsg['firtName']="Please enter first name.";
            $hasError = 1;
        }else{
            $validationErrMsg['firtName']="";
        }
        
        if($postData['lastName']==''){
            $validationErrMsg['lastName']="Please enter last name.";
            $hasError = 1;
        }else{
            $validationErrMsg['lastName']="";
        }
        
        
        
        if($postData['birthDay']==''){
            $validationErrMsg['dateOfBirth']="Please select day of birth.";
            $hasError = 1;
        }else if($postData['birthMonth']==''){
            $validationErrMsg['dateOfBirth']="Please select month of birth.";
            $hasError = 1;
        }else if($postData['birthYear']==''){
            $validationErrMsg['dateOfBirth']="Please select year of birth.";
            $hasError = 1;
        }else{
            $validationErrMsg['dateOfBirth']="";
        }
        
        if($postData['email']==''){
            $validationErrMsg['email']="Please enter email.";
            $hasError = 1;
        }else if(!preg_match($pattern, $postData['email'])){
            $validationErrMsg['email']="Invalid Email Id.";
            $hasError = 1;
        }else if($allEmails->count() > 0){
            $validationErrMsg['email']="This Email Id exists for other user.";
            $hasError = 1;
        }else{
            $validationErrMsg['email']="";
        }
        
        if($postData['phone']==''){
            $validationErrMsg['phone']="Please enter phone no.";
            $hasError = 1;
        }else{
            $validationErrMsg['phone']="";
        }        
        
        if($postData['address']==''){
            $validationErrMsg['address']="Please enter address.";
            $hasError = 1;
        }else{
            $validationErrMsg['address']="";
        }
        
        if($postData['city']==''){
            $validationErrMsg['city']="Please enter city.";
            $hasError = 1;
        }else{
            $validationErrMsg['city']="";
        }
        
        if($postData['state']==''){
            $validationErrMsg['state']="Please enter state.";
            $hasError = 1;
        }else{
            $validationErrMsg['state']="";
        }
        
        if($_FILES['usersImage']['name']!='' && $extn!='JPG' && $extn!='JPEG' && $extn!='GIF' && $extn!='PNG' && $extn!='jpg' && $extn!='jpeg' && $extn!='gif' && $extn!='png'){
            $validationErrMsg['usersImage']="This is not image file.";
            $hasError = 1;
        }else{
            $validationErrMsg['usersImage']="";
        }
        
        if($postData['country']==''){
            $validationErrMsg['country']="Please select country.";
            $hasError = 1;
        }else{
            $validationErrMsg['country']="";
        } 
            
        if($hasError==0)
        {
            $targetPath = './uploads/images/users_profile/';
            $imageName = time().rand(0,100);
            $up=$this->ImageTransform->upload("usersImage",$targetPath,$imageName);
            if($up)
            {
                chmod($targetPath.$imageName.'.'.$extn,0777);                    
                $this->ImageTransform->setQuality(100);
                $this->ImageTransform->resize($this->ImageTransform->main_src,100,100, './uploads/images/users_profile/thumb/'.$this->ImageTransform->main_img);
            }
        
            //$postData = $this->request->data;            
            $role = "";
            foreach($postData['role'] as $val){
                $role .= $val.',';                    
            }
            $role = substr($role,0,-1);
            if($_FILES['usersImage']['name']!='')
            {
                $databaseArr = array(                    
                    'role'              =>      $role,
                    'userRoles'         =>      $postData['userRoles'],
                    'firstName'         =>      $postData['firtName'],
                    'lastName'          =>      $postData['lastName'],
                    'dateOfBirth'       =>      $postData['birthYear'].'-'.$postData['birthMonth'].'-'.$postData['birthDay'],
                    'email'             =>      $postData['email'],
                    'phone'             =>      $postData['phone'],
                    'address'           =>      $postData['address'],
                    'city'              =>      $postData['city'],
                    'state'             =>      $postData['state'],
                    'country'           =>      $postData['country'],
                    'photo'             =>      $imageName.'.'.$extn,
                    'registrationDate'  =>      time(),
                    'lastLogin'         =>      '',
                    'is_active'         =>      '1',
                    'is_deleted'        =>      '0',       
                    'updatedDate'         =>      time()
                );
            }
            else
            {
                $databaseArr = array(                    
                    'role'              =>      $role,
                    'userRoles'         =>      $postData['userRoles'],
                    'firstName'         =>      $postData['firtName'],
                    'lastName'          =>      $postData['lastName'],
                    'dateOfBirth'       =>      $postData['birthYear'].'-'.$postData['birthMonth'].'-'.$postData['birthDay'],
                    'email'             =>      $postData['email'],
                    'phone'             =>      $postData['phone'],
                    'address'           =>      $postData['address'],
                    'city'              =>      $postData['city'],
                    'state'             =>      $postData['state'],
                    'country'           =>      $postData['country'],
                    'registrationDate'  =>      time(),
                    'lastLogin'         =>      '',
                    'is_active'         =>      '1',
                    'is_deleted'        =>      '0',         
                    'updatedDate'       =>      time()
                );
            }

            $users = $this->Users->patchEntity($users, $databaseArr);
            $this->Users->save($users);
            $this->Flash->success('The user has been saved', [
                'key' => 'positive'
            ]);
            return $this->redirect(BASE_URL.'admin/user/edit/'.$id);
        }


    }    
    
    $this->set(compact('users'));
    $this->set('_serialize', ['users']);
    $this->set(array(
        'allCountries'   =>    $allCountries,
        'validationErrMsg'     => $validationErrMsg,
        'fieldsValue'          => $fieldsValue,
         'allRoles' =>  $allRoles
    ));
}

public function add()
{
   $this->set('active_class','user');
   
    $session = $this->request->session();
    $adminDetls = $session->read('admin.details');
    $hasAccess = $this->hasAccess($adminDetls->id,'8','moduleAdd');
    if($hasAccess=='0' && $adminDetls->id!='1'){
        $this->Flash->success("You don't have access to this page.", [
           'key' => 'positive'
        ]);
        $this->redirect(BASE_URL.'admin/dashboard');        
    }
    
    $this->loadComponent('ImageTransform');
    $this->set('title','Admin|Add Users');
    $this->set('description','Admin|Add Users');
    $this->set('userRole',$adminDetls->role);
    $pattern = "/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/i";
    $validationErrMsg = array();
    $fieldsValue = array();
    $hasError = 0;
   
    $this->loadModel('Countries');
    $this->loadModel('Users');
    $this->loadModel('Roles');
   
    $allRoles = $this->Roles->find('all');
    $allCountries=$this->Countries->find('all',
        array(
            'order' => 'Countries.country_name ASC'                        
        ));
   
    if($this->request->is('post'))
    {
      //$this->request->data['password']=$password='123456';
        $postData = $this->request->data;   
        
        if($_FILES['usersImage']['name']!=''){
            $fileName = $_FILES['usersImage']['name'];
            $fileNameArr = explode(".",$fileName);
            $fileNameArrCnt = count($fileNameArr);
            $extn = $fileNameArr[$fileNameArrCnt-1];
            $extn = strtolower($extn);
        }
        
        //echo count($postData['role']);
        //pr($postData['role']);exit;

        $fieldsValue['role'] = isset($postData['role']) ? $postData['role'] : array();
        $fieldsValue['username'] = $postData['username'];
        $fieldsValue['firtName'] = $postData['firtName'];
        $fieldsValue['lastName'] = $postData['lastName']; 
        $fieldsValue['birthDay'] = $postData['birthDay']; 
        $fieldsValue['birthMonth'] = $postData['birthMonth']; 
        $fieldsValue['birthYear'] = $postData['birthYear']; 
        $fieldsValue['email'] = $postData['email']; 
        $fieldsValue['phone'] = $postData['phone']; 
        $fieldsValue['address'] = $postData['address']; 
        $fieldsValue['city'] = $postData['city']; 
        $fieldsValue['state'] = $postData['state']; 
        $fieldsValue['country'] = $postData['country']; 
        

        $allUsernames=$this->Users->find('all',
            array('conditions' => array(
                'username' => $postData['username'],
                'is_deleted'  => '0'
            )));
        
        $allEmails=$this->Users->find('all',
            array('conditions' => array(
                'email' => $postData['email'],
                'is_deleted'  => '0'
            )));
        

        if(!isset($postData['role']) || count($postData['role'])==0){
            $validationErrMsg['role']="Please select role.";
            $hasError = 1;
        }else{
            $validationErrMsg['role']="";
        }
        
        if($postData['userRoles']==''){
            //$validationErrMsg['userRoles']="Please select user roles";
            $validationErrMsg['userRoles']="";
            //$hasError = 1;
            $fieldsValue['userRoles'] = "";
            
        }else{
            $validationErrMsg['userRoles']="";
            $fieldsValue['userRoles'] = $postData['userRoles'];
        }

        if($postData['username']==''){
            $validationErrMsg['username']="Please enter user name.";
            $hasError = 1;
        }else if($allUsernames->count() > 0){
            $validationErrMsg['username']="This Username exists.";
            $hasError = 1;
        }else{
            $validationErrMsg['username']="";
        }
        
        if($postData['firtName']==''){
            $validationErrMsg['firtName']="Please enter first name.";
            $hasError = 1;
        }else{
            $validationErrMsg['firtName']="";
        }
        
        if($postData['lastName']==''){
            $validationErrMsg['lastName']="Please enter last name.";
            $hasError = 1;
        }else{
            $validationErrMsg['lastName']="";
        }
        
        
        if($postData['birthDay']==''){
            $validationErrMsg['dateOfBirth']="Please select day of birth.";
            $hasError = 1;
        }else if($postData['birthMonth']==''){
            $validationErrMsg['dateOfBirth']="Please select month of birth.";
            $hasError = 1;
        }else if($postData['birthYear']==''){
            $validationErrMsg['dateOfBirth']="Please select year of birth.";
            $hasError = 1;
        }else{
            $validationErrMsg['dateOfBirth']="";
        }

        
        if($postData['email']==''){
            $validationErrMsg['email']="Please enter email.";
            $hasError = 1;
        }else if(!preg_match($pattern, $postData['email'])){
            $validationErrMsg['email']="Invalid Email Id.";
            $hasError = 1;
        }else if($allEmails->count() > 0){
            $validationErrMsg['email']="This Email Id exists.";
            $hasError = 1;
        }else{
            $validationErrMsg['email']="";
        }
        
        if($postData['phone']==''){
            $validationErrMsg['phone']="Please enter phone no.";
            $hasError = 1;
        }else{
            $validationErrMsg['phone']="";
        }        
        
        if($postData['address']==''){
            $validationErrMsg['address']="Please enter address.";
            $hasError = 1;
        }else{
            $validationErrMsg['address']="";
        }
        
        if($postData['city']==''){
            $validationErrMsg['city']="Please enter city.";
            $hasError = 1;
        }else{
            $validationErrMsg['city']="";
        }
        
        if($postData['state']==''){
            $validationErrMsg['state']="Please enter state.";
            $hasError = 1;
        }else{
            $validationErrMsg['state']="";
        }
        
        if($_FILES['usersImage']['name']==''){
            $validationErrMsg['usersImage']="Please upload users image.";
            $hasError = 1;
        }else if($extn!='JPG' && $extn!='JPEG' && $extn!='GIF' && $extn!='PNG' && $extn!='jpg' && $extn!='jpeg' && $extn!='gif' && $extn!='png'){
            $validationErrMsg['usersImage']="This is not image file.";
            $hasError = 1;
        }else{
            $validationErrMsg['usersImage']="";
        }
        
        if($postData['country']==''){
            $validationErrMsg['country']="Please select country.";
            $hasError = 1;
        }else{
            $validationErrMsg['country']="";
        }       
       
        if($hasError==0)
        {
            $userRegisNo = $this->randomPrefix(10);
            
            if($_FILES['usersImage']['name']!='')
            {
                $targetPath = './uploads/images/users_profile/';
                $imageName = time().rand(0,100);
                $up=$this->ImageTransform->upload("usersImage",$targetPath,$imageName);
                if($up)
                {
                    chmod($targetPath.$imageName.'.'.$extn,0777);                    
                    $this->ImageTransform->setQuality(100);
                    $this->ImageTransform->resize($this->ImageTransform->main_src,100,100, './uploads/images/users_profile/thumb/'.$this->ImageTransform->main_img);
                }
            }
            
            $role = "";
            foreach($postData['role'] as $val){
                $role .= $val.',';                    
            }
            
            $password = $this->generatePassword();
            $role = substr($role,0,-1);
            $activationKey = $this->randomPrefix(16);
            $user = $this->Users->newEntity();                       
            $databaseArr = array(
                'role'              =>      $role,
                'userRoles'         =>      $postData['userRoles'],
                'regisNo'           =>      date('Y').$userRegisNo,
                'username'          =>      $postData['email'],
                'password'          =>      $password,
                'firstName'         =>      $postData['firtName'],
                'lastName'          =>      $postData['lastName'],
                'dateOfBirth'       =>      $postData['birthYear'].'-'.$postData['birthMonth'].'-'.$postData['birthDay'],
                'email'             =>      $postData['email'],
                'phone'             =>      $postData['phone'],
                'address'           =>      $postData['address'],
                'city'              =>      $postData['city'],
                'state'             =>      $postData['state'],
                'country'           =>      $postData['country'],
                'photo'             =>      $imageName.'.'.$extn,
                'registrationDate'  =>      time(),
                'lastLogin'         =>      '',
                'is_active'         =>      '0',
                'is_deleted'        =>      '0',                              
                'createdDate'       =>      time(),
                'updatedDate'       =>      time(),
                'activationKey'     =>      $activationKey
            );         

            $user = $this->Users->patchEntity($user, $databaseArr);
            $this->Users->save($user);
            
            $mailBody = '
            <div style="width:700px; border:1px solid black;">
            <div><h2>Team Trial</h2></div>
            <div>
            Hello '.$postData['firtName'].' '.$postData['lastName'].',
            <br /><br />
            You have been registered successfully by admin.
            <br />
            Please see below your login credentials :
            <br />
            <a href="'.BASE_URL.'user-activation/'.$activationKey.'">Click Here </a>to activate your account.
            <br />
            <a href="'.BASE_URL.'user-login">Click Here </a>to login.<br />
            <b>Email :</b> '.$postData['email'].'<br />
            <b>Password :</b> '.$password.'
            <br /><br />
            Regards,<br />
            Team Trial.
            </div>
            </div>
            ';
            //echo $mailBody;exit;
            $to = $postData['email'];
            $subject = $role." Registration";
            $sendemail = new Sendemail(); 
            $sendemail->send($to,$mailBody,$subject);
            
            
            $this->Flash->success('The user has been saved', [
                'key' => 'positive'
            ]);
            $this->redirect(BASE_URL.'admin/user/add');
        }
    }
   
    $this->set(array(
        'allCountries' => $allCountries,
        'fieldsValue' => $fieldsValue,
        'validationErrMsg' => $validationErrMsg,
        'allRoles' =>  $allRoles
    ));
}

public function userlist()
{
   $this->set('active_class','user');
    $session = $this->request->session();
    $adminDetls = $session->read('admin.details');
    $hasAccess = $this->hasAccess($adminDetls->id,'8','moduleList');
    if($hasAccess=='0' && $adminDetls->id!='1'){
        $this->Flash->success("You don't have access to this page.", [
           'key' => 'positive'
        ]);
        $this->redirect(BASE_URL.'admin/dashboard');        
    }

    $this->loadModel('Users');
    $this->set('title',"Admin|Users List");
    $this->set('description',"Admin|Users List");
    $this->set('userRole',$adminDetls->role);
    $totRecordsPerPage = 10;
    
    if(isset($this->request->query['searchKey'])){
        $searchKey = $this->request->query['searchKey'];
    }else{
        $searchKey = '';
    }
    
    if($searchKey!=''){
      
      $searchKeyArr = explode(" ",$searchKey);
      if(isset($searchKeyArr[1]) && $searchKeyArr[1]!=""){
         $conditionArr = array(
            'firstName LIKE' => '%'.$searchKeyArr[0].'%',
            'firstName LIKE' => '%'.$searchKeyArr[1].'%',
            'lastName LIKE' => '%'.$searchKeyArr[0].'%',
            'lastName LIKE' => '%'.$searchKeyArr[1].'%',
            'username LIKE' => '%'.$searchKey.'%',            
         );
      }else{
         $conditionArr = array(
            'firstName LIKE' => '%'.$searchKeyArr[0].'%',
            'lastName LIKE' => '%'.$searchKeyArr[0].'%',
            'username LIKE' => '%'.$searchKey.'%',            
         );
      }
      
        $this->paginate = [
        'limit'=>$totRecordsPerPage,
        'conditions' => [
                'Users.id <>' => 1,
                'is_deleted' => '0',
                'or' => $conditionArr
            ]
        ];        
    }else{
        $this->paginate = [
        'limit'=>$totRecordsPerPage,
        'conditions' => [
                'Users.id <>' => 1,
                'is_deleted' => '0'
            ]
        ];
    }

    
    $this_user=$this->paginate($this->Users);
    $this->set(array(
        'searchKey' => $searchKey,
        'allRecordCount' => $this_user->count()
    ));
    $this->set('users',$this_user );
    $this->set('_serialize', ['users']);
}


public function logout()
{
    $this->autorender=false;
    $session = $this->request->session();
    $session->delete('admin.details');
    $this->Auth->logout(); 
    $this->redirect(BASE_URL.'administrator');
}


public function delete($id=null)
{   
    $session = $this->request->session();
    $adminDetls = $session->read('admin.details');
    $hasAccess = $this->hasAccess($adminDetls->id,'8','moduleDelete');
    if($hasAccess=='0' && $adminDetls->id!='1'){
        $this->Flash->success("You don't have access to this page.", [
           'key' => 'positive'
        ]);
        $this->redirect(BASE_URL.'admin/dashboard');        
    }
    
    $this->loadModel('Users');
    $this->loadModel('TeamPlayers');
    $this->loadModel('TeamCoaches');
    
    $players = $this->TeamPlayers->find('all',[
         'conditions' => [
            'playerId'  => $id
    ]]);
    
    $coaches = $this->TeamCoaches->find('all',[
         'conditions' => [
            'coachId'  => $id
    ]]);
    
    if($players->count()==0 && $coaches->count()==0){
       $databaseArr = array(
           'is_active'     =>  '0',
           'is_deleted'    =>  '1'
       );
       $users = $this->Users->get($id, [
           'contain' => []
       ]);
       $users = $this->Users->patchEntity($users, $databaseArr);
       $this->Users->save($users);
       $this->Flash->success('The user has been deleted successfully.', [
           'key' => 'positive'
       ]);
       return $this->redirect(BASE_URL.'admin/user');
    }else{
      $this->Flash->success('This user cannot be deleted as this user has already beeen appointed as player or coach.', [
           'key' => 'positive'
       ]);
       return $this->redirect(BASE_URL.'admin/user');
    }
    
    
} 





/////////// ---> defining authorized pages

public function isAuthorized($user)
{
     $action = $this->request->params['action'];
     // The add and index actions are always allowed.
     if (in_array($action, ['index', 'dashboard','logout','add','userlist','edit','delete'])) {
     return true;
     }
     // All other actions require an id.
     if (empty($this->request->params['pass'][0])) {
     return false;
     }

     return parent::isAuthorized($user);
}


}
