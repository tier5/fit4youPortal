<?php

namespace App\Controller;

use Cake\Controller\Controller;
use Cake\Event\Event;
use Cake\Utility\Security;


class AdmingymsController extends AppController{

    public function index($search1=null,$search2=null)
    {
        $session = $this->request->session();
        $adminDetls = $session->read('admin.details');
        $this->set('active_class','organisation');
        
        $hasAccess = $this->hasAccess($adminDetls->id,'1','moduleList');
        if($hasAccess=='0' && $adminDetls->id!='1'){
            $this->Flash->success("You don't have access to this page.", [
               'key' => 'positive'
            ]);
            $this->redirect(BASE_URL.'admin/dashboard');        
        }
        
        
        $this->loadModel('Gyms');
        $this->set('title',"Admin|List Gyms");
        $this->set('description','Admin|List Organisation');
        $this->set('userRole',$adminDetls->role);
        
        
        if(isset($this->request->query['organisationType'])){
            $organisationType = $this->request->query['organisationType'];
        }else{
            $organisationType = '';
        }
        
        if(isset($this->request->query['searchKey'])){
            $searchKey = $this->request->query['searchKey'];
        }else{
            $searchKey = '';
        }
        
        $totRecordsPerPage = 10;
        
        if($organisationType!='' && $searchKey!=''){               
            $this->paginate = [
                'limit' =>  $totRecordsPerPage,
                'conditions' =>  [
                    'organisationType' => $organisationType,
                    'or'=>[
                        'organisationName LIKE' => '%'.$searchKey.'%',
                        'organisationAddress' => '%'.$searchKey.'%',
                    ]
            ]];
        }else if($organisationType!='' && $searchKey==''){
            
            if($organisationType=='all'){
                $this->paginate = [
                    'limit'=>$totRecordsPerPage,
                ];
            }else{
                $this->paginate = [
                    'limit' =>  $totRecordsPerPage,
                    'conditions' =>  [
                        'organisationType' => $organisationType
                ]];
            }
            
        
        }else if($organisationType=='' && $searchKey!=''){
            $this->paginate = [
                'limit' =>  $totRecordsPerPage,
                'conditions' =>  [
                    'organisationName LIKE' => '%'.$searchKey.'%',
                    //'or'=>['organisationAddress LIKE' => '%'.$searchKey.'%']
            ]];
        }else{
            $this->paginate = [
                'limit'=>$totRecordsPerPage,
            ];
       }
        
        $this->set(array(
            'organisationType'=>$organisationType,
            'searchKey'=>$searchKey,
        ));
        
        
        $thisOrganisation = $this->paginate($this->Organisations);
        $thisOrganisationCount = $thisOrganisation->count();
        
        $this->set(array('thisOrganisationCount'=>$thisOrganisationCount));
        $this->set('organisations',$thisOrganisation);
        $this->set('_serialize', ['organisations']);
    }
    
    public function add()
    {
        $this->loadModel('Organisations');
        $session = $this->request->session();
        $this->set('active_class','organisation');
        
        $adminDetls = $session->read('admin.details');
        $hasAccess = $this->hasAccess($adminDetls->id,'1','moduleAdd');
        if($hasAccess=='0' && $adminDetls->id!='1'){
            $this->Flash->success("You don't have access to this page.", [
               'key' => 'positive'
            ]);
            $this->redirect(BASE_URL.'admin/dashboard');        
        }
        
        $validationErrMsg = array();
        $fieldsValue = array();
        $hasError = 0;
        
        $this->set('title',"Admin|Add Organisation");
        $this->set('description','Admin|Add Organisation');
        $this->set('userRole',$adminDetls->role);
        $pattern = "/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/i";
        
        if($this->request->is('post'))
        {
            $postData = $this->request->data;     
            
            $fieldsValue['organisationType'] = $postData['organisationType'];
            $fieldsValue['organisationName'] = $postData['organisationName'];
            $fieldsValue['organisationAddress'] = $postData['organisationAddress'];
            $fieldsValue['organisationPhone'] = $postData['organisationPhone'];
            $fieldsValue['organisationEmail'] = $postData['organisationEmail'];  
            
            $allRecords=$this->Organisations->find('all',array('conditions' => array('organisationEmail' => $postData['organisationEmail'])));
            $allRecordsOrganisationName=$this->Organisations->find('all',
                    array('conditions' => 
                        array(
                            'organisationName' => $postData['organisationName']
                    )));

            if($postData['organisationType']==''){
                $validationErrMsg['organisationType']="Please select organisation type.";
                $hasError = 1;
            }else{
                $validationErrMsg['organisationType']="";
            }
            
            if($postData['organisationName']==''){
                $validationErrMsg['organisationName']="Please enter organisation name.";
                $hasError = 1;
            }else if($allRecordsOrganisationName->count() > 0){
                $validationErrMsg['organisationName']="This Organisation name already exists.";
                $hasError = 1;
            }else{
                $validationErrMsg['organisationName']="";
            }
            
            if($postData['organisationAddress']==''){
                $validationErrMsg['organisationAddress']="Please enter organisation address.";
                $hasError = 1;
            }else{
                $validationErrMsg['organisationAddress']="";
            }
            
            if($postData['organisationPhone']==''){
                $validationErrMsg['organisationPhone']="Please enter organisation phone.";
                $hasError = 1;
            }else{
                $validationErrMsg['organisationPhone']="";
            }
            
            if($postData['organisationEmail']==''){
                $validationErrMsg['organisationEmail']="Please enter organisation Email.";
                $hasError = 1;
            }else if(!preg_match($pattern, $postData['organisationEmail'])){
                $validationErrMsg['organisationEmail']="Invalid Email Id.";
                $hasError = 1;
            }else if($allRecords->count() > 0){
                $validationErrMsg['organisationEmail']="This Email Id exists.";
                $hasError = 1;
            }else{
                $validationErrMsg['organisationEmail']="";
            }
            

            if($hasError==0)
            {
                $this->loadModel('Organisations');
                $organisation = $this->Organisations->newEntity();

                       
                $databaseArr = array(
                    'adminId'               =>      '1',
                    'organisationType'      =>      $postData['organisationType'],
                    'organisationName'      =>      $postData['organisationName'],
                    'organisationAddress'   =>      $postData['organisationAddress'],
                    'organisationPhone'     =>      $postData['organisationPhone'],
                    'organisationEmail'     =>      $postData['organisationEmail'],
                    'createdDate'           =>      time(),
                    'updateddate'           =>      time()
                );         

                $organisation = $this->Organisations->patchEntity($organisation, $databaseArr);
                $this->Organisations->save($organisation);
                
                $this->Flash->success('Organisation has been saved successfully.', [
                    'key' => 'positive'
                ]);
                $this->redirect(BASE_URL.'admin/organisation/add');
            }
            
        }
        $this->set(array('validationErrMsg' => $validationErrMsg,'fieldsValue'=>$fieldsValue));
    }
    
    
    public function edit($id = null)
    {
        $this->loadModel('Organisations');
        $this->set('active_class','organisation');
        
        $session = $this->request->session();
        $adminDetls = $session->read('admin.details');
        $hasAccess = $this->hasAccess($adminDetls->id,'1','moduleEdit');
        if($hasAccess=='0' && $adminDetls->id!='1'){
            $this->Flash->success("You don't have access to this page.", [
               'key' => 'positive'
            ]);
            $this->redirect(BASE_URL.'admin/dashboard');        
        }
        
        $this->set('title',"Admin|Edit Organisation");
        $this->set('description',"Admin|Edit Organisation");
        $this->set('userRole',$adminDetls->role);
        $pattern = "/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/i";
        $validationErrMsg = array();
        $fieldsValue = array();
        $hasError = 0;
        
        $organisations = $this->Organisations->get($id, [
            'contain' => []
        ]);
        //if ($this->request->is(['patch', 'post', 'put'])) {
        if ($this->request->is('post')) {
            
            $postData = $this->request->data;  
            $fieldsValue['organisationType'] = $postData['organisationType'];
            $fieldsValue['organisationName'] = $postData['organisationName'];
            $fieldsValue['organisationAddress'] = $postData['organisationAddress'];
            $fieldsValue['organisationPhone'] = $postData['organisationPhone'];
            $fieldsValue['organisationEmail'] = $postData['organisationEmail'];
            
            
            $allRecords=$this->Organisations->find('all',
                    array(
                        'conditions' => array(
                            'organisationEmail' => $postData['organisationEmail'],
                            'id <>' =>  $id
                    )));
            $allRecordsOrganisationName=$this->Organisations->find('all',
                    array('conditions' => 
                        array(
                            'organisationName' => $postData['organisationName'],
                            'id <>' =>  $id
                    )));

            if($postData['organisationType']==''){
                $validationErrMsg['organisationType']="Please select organisation type.";
                $hasError = 1;
            }else{
                $validationErrMsg['organisationType']="";
            }
            
            if($postData['organisationName']==''){
                $validationErrMsg['organisationName']="Please enter organisation name.";
                $hasError = 1;
            }else if($allRecordsOrganisationName->count() > 0){
                $validationErrMsg['organisationName']="This Organisation name exists another record.";
                $hasError = 1;
            }else{
                $validationErrMsg['organisationName']="";
            }
            
            if($postData['organisationAddress']==''){
                $validationErrMsg['organisationAddress']="Please enter organisation address.";
                $hasError = 1;
            }else{
                $validationErrMsg['organisationAddress']="";
            }
            
            if($postData['organisationPhone']==''){
                $validationErrMsg['organisationPhone']="Please enter organisation phone.";
                $hasError = 1;
            }else{
                $validationErrMsg['organisationPhone']="";
            }
            
            if($postData['organisationEmail']==''){
                $validationErrMsg['organisationEmail']="Please enter organisation Email.";
                $hasError = 1;
            }else if(!preg_match($pattern, $postData['organisationEmail'])){
                $validationErrMsg['organisationEmail']="Invalid Email Id.";
                $hasError = 1;
            }else if($allRecords->count() > 0){
                $validationErrMsg['organisationEmail']="This Email Id exists for another record.";
                $hasError = 1;
            }else{
                $validationErrMsg['organisationEmail']="";
            }
            
            if($hasError==0)
            {
                $databaseArr = array(
                    'adminId'               =>      '1',
                    'organisationType'      =>      $postData['organisationType'],
                    'organisationName'      =>      $postData['organisationName'],
                    'organisationAddress'   =>      $postData['organisationAddress'],
                    'organisationPhone'     =>      $postData['organisationPhone'],
                    'organisationEmail'     =>      $postData['organisationEmail'],
                    //'createdDate'           =>      time(),
                    'updateddate'           =>      time()
                );

                $organisation = $this->Organisations->patchEntity($organisations, $databaseArr);                                       
                $this->Organisations->save($organisation);
                $this->Flash->success('Organisation has been updated successfully.', [
                    'key' => 'positive'
                ]);
                return $this->redirect(BASE_URL.'admin/organisation/edit/'.$id); 
            }            
        }
        
        $this->set(array(
            'validationErrMsg'  =>  $validationErrMsg,
            'fieldsValue'  =>  $fieldsValue,
        ));
        $this->set(compact('organisations'));
        $this->set('_serialize', ['organisations']);
    }
    
    public function delete($id = null)
    {
        $session = $this->request->session();
        $adminDetls = $session->read('admin.details');
        $hasAccess = $this->hasAccess($adminDetls->id,'1','moduleDelete');
        if($hasAccess=='0' && $adminDetls->id!='1'){
            $this->Flash->success("You don't have access to this page.", [
               'key' => 'positive'
            ]);
            $this->redirect(BASE_URL.'admin/dashboard');        
        }
        
        $this->loadModel('Organisations');
        $this->loadModel('Teams');
        
        $teams = $this->Teams->find('all',[
            'conditions' => ['organisationId'=>$id]
        ]);
        if($teams->count()==0){
            $entity = $this->Organisations->get($id);
            $result = $this->Organisations->delete($entity);
            $this->Flash->success('Organisation has been delete successfully.', [
                'key' => 'positive'
            ]);
            return $this->redirect(BASE_URL.'admin/organisation');
        }else{
            $this->Flash->success('Cannot be deleted as team is assigned under this organisation.', [
                'key' => 'positive'
            ]);
            return $this->redirect(BASE_URL.'admin/organisation');
        }
    }
    
    
    public function isAuthorized($user)
    {
         $action = $this->request->params['action'];
         
         // The add and index actions are always allowed.
         if (in_array($action, ['index','add','edit','delete'])) {
            return true;
         }
         // All other actions require an id.
         if (empty($this->request->params['pass'][0])) {
            return false;
         }

         return parent::isAuthorized($user);
    }




}
